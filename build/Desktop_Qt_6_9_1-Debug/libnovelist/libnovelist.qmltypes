import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "basestorage.h"
        name: "BaseStorage"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["libnovelist/BaseStorage 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "database"
            type: "QSqlDatabase"
            read: "database"
            write: "setDatabase"
            notify: "databaseChanged"
            index: 0
            isFinal: true
        }
        Signal {
            name: "nodeCreated"
            Parameter { name: "node"; type: "Node"; isPointer: true }
        }
        Signal {
            name: "nodeRecycled"
            Parameter { name: "node"; type: "Node"; isPointer: true }
        }
        Signal {
            name: "nodeRevived"
            Parameter { name: "node"; type: "Node"; isPointer: true }
        }
        Signal {
            name: "nodeDestroyed"
            Parameter { name: "node"; type: "Node"; isPointer: true }
        }
        Signal {
            name: "nodeInserted"
            Parameter { name: "node"; type: "Node"; isPointer: true }
        }
        Signal {
            name: "nodeUpdated"
            Parameter { name: "node"; type: "Node"; isPointer: true }
        }
        Signal {
            name: "nodeSaved"
            Parameter { name: "node"; type: "Node"; isPointer: true }
        }
        Signal {
            name: "nodeReloaded"
            Parameter { name: "node"; type: "Node"; isPointer: true }
        }
        Signal {
            name: "nodeLoaded"
            Parameter { name: "node"; type: "Node"; isPointer: true }
        }
        Signal {
            name: "nodeRemoved"
            Parameter { name: "node"; type: "Node"; isPointer: true }
        }
        Signal { name: "databaseChanged" }
    }
    Component {
        file: "basestorage.h"
        name: "BaseTypeStorage"
        accessSemantics: "reference"
        prototype: "BaseStorage"
        exports: ["libnovelist/BaseTypeStorage 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Method {
            name: "nodeType"
            type: "NodeType"
            isPointer: true
            Parameter { name: "name"; type: "QString" }
        }
    }
    Component {
        file: "element.h"
        name: "Element"
        accessSemantics: "reference"
        prototype: "Node"
        exports: ["libnovelist/Element 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "fields"
            type: "QList<Field*>"
            read: "fields"
            write: "setFields"
            notify: "fieldsChanged"
            index: 0
            isFinal: true
        }
        Property {
            name: "fieldListModel"
            type: "FieldListModel"
            isPointer: true
            read: "fieldListModel"
            index: 1
            isReadonly: true
            isFinal: true
            isPropertyConstant: true
        }
        Signal { name: "fieldsChanged" }
        Signal {
            name: "fieldsAdded"
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "fieldsRemoved"
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
    }
    Component {
        file: "elementstorage.h"
        name: "ElementStorage"
        accessSemantics: "reference"
        prototype: "BaseStorage"
        exports: ["libnovelist/ElementStorage 1.0"]
        exportMetaObjectRevisions: [256]
        Method { name: "element"; type: "Element"; isPointer: true }
        Method {
            name: "element"
            type: "Element"
            isPointer: true
            Parameter { name: "rowid"; type: "int" }
        }
        Method {
            name: "createElement"
            type: "Element"
            isPointer: true
            Parameter { name: "nodeType"; type: "ElementType"; isPointer: true }
            Parameter { name: "label"; type: "QString" }
            Parameter { name: "info"; type: "QString" }
            Parameter { name: "icon"; type: "QString" }
        }
        Method {
            name: "createElement"
            type: "Element"
            isPointer: true
            isCloned: true
            Parameter { name: "nodeType"; type: "ElementType"; isPointer: true }
            Parameter { name: "label"; type: "QString" }
            Parameter { name: "info"; type: "QString" }
        }
        Method {
            name: "createElement"
            type: "Element"
            isPointer: true
            isCloned: true
            Parameter { name: "nodeType"; type: "ElementType"; isPointer: true }
            Parameter { name: "label"; type: "QString" }
        }
        Method {
            name: "createElement"
            type: "Element"
            isPointer: true
            isCloned: true
            Parameter { name: "nodeType"; type: "ElementType"; isPointer: true }
        }
        Method { name: "createElement"; type: "Element"; isPointer: true; isCloned: true }
    }
    Component {
        file: "elementtype.h"
        name: "ElementType"
        accessSemantics: "reference"
        prototype: "NodeType"
        exports: ["libnovelist/ElementType 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "fieldTypes"
            type: "QList<FieldType*>"
            read: "fieldTypes"
            write: "setFieldTypes"
            notify: "fieldTypesChanged"
            index: 0
            isFinal: true
        }
        Property {
            name: "fieldTypeListModel"
            type: "FieldTypeListModel"
            isPointer: true
            read: "fieldTypeListModel"
            index: 1
            isReadonly: true
            isFinal: true
            isPropertyConstant: true
        }
        Signal { name: "fieldTypesChanged" }
        Signal {
            name: "fieldTypesAdded"
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "fieldTypesRemoved"
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
    }
    Component {
        file: "elementtypelistmodel.h"
        name: "ElementTypeListModel"
        accessSemantics: "reference"
        prototype: "QAbstractListModel"
        exports: ["libnovelist/ElementTypeListModel 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "Role"
            values: [
                "ElementTypeRole",
                "NameRole",
                "LabelRole",
                "InfoRole",
                "IconRole",
                "MinOccursRole",
                "MaxOccursRole",
                "AllowesTypesRole",
                "FieldTypesRole",
                "UserRole"
            ]
        }
        Property {
            name: "elementTypes"
            type: "QList<ElementType*>"
            read: "elementTypes"
            write: "setElementTypes"
            notify: "elementTypesChanged"
            index: 0
            isFinal: true
        }
        Signal { name: "elementTypesChanged" }
        Method {
            name: "rowCount"
            type: "int"
            isMethodConstant: true
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "rowCount"; type: "int"; isCloned: true; isMethodConstant: true }
        Method {
            name: "data"
            type: "QVariant"
            isMethodConstant: true
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "data"
            type: "QVariant"
            isCloned: true
            isMethodConstant: true
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "elementType"
            type: "ElementType"
            isPointer: true
            isMethodConstant: true
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        file: "elementtypestorage.h"
        name: "ElementTypeStorage"
        accessSemantics: "reference"
        prototype: "BaseTypeStorage"
        exports: ["libnovelist/ElementTypeStorage 1.0"]
        exportMetaObjectRevisions: [256]
        Method { name: "elementType"; type: "ElementType"; isPointer: true }
        Method {
            name: "elementType"
            type: "ElementType"
            isPointer: true
            Parameter { name: "rowid"; type: "int" }
        }
        Method {
            name: "elementType"
            type: "ElementType"
            isPointer: true
            Parameter { name: "name"; type: "QString" }
        }
        Method {
            name: "createElementType"
            type: "ElementType"
            isPointer: true
            Parameter { name: "name"; type: "QString" }
            Parameter { name: "label"; type: "QString" }
            Parameter { name: "info"; type: "QString" }
            Parameter { name: "icon"; type: "QString" }
        }
        Method {
            name: "createElementType"
            type: "ElementType"
            isPointer: true
            isCloned: true
            Parameter { name: "name"; type: "QString" }
            Parameter { name: "label"; type: "QString" }
            Parameter { name: "info"; type: "QString" }
        }
        Method {
            name: "createElementType"
            type: "ElementType"
            isPointer: true
            isCloned: true
            Parameter { name: "name"; type: "QString" }
            Parameter { name: "label"; type: "QString" }
        }
        Method {
            name: "createElementType"
            type: "ElementType"
            isPointer: true
            isCloned: true
            Parameter { name: "name"; type: "QString" }
        }
    }
    Component {
        file: "elementtypetablemodel.h"
        name: "ElementTypeTableModel"
        accessSemantics: "reference"
        prototype: "QAbstractItemModel"
        exports: ["libnovelist/ElementTypeTableModel 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "elementTypes"
            type: "QList<ElementType*>"
            read: "elementTypes"
            write: "setElementTypes"
            notify: "elementTypesChanged"
            index: 0
            isFinal: true
        }
        Signal { name: "elementTypesChanged" }
    }
    Component {
        file: "elementtypetreemodel.h"
        name: "ElementTypeTreeModel"
        accessSemantics: "reference"
        prototype: "QStandardItemModel"
        exports: ["libnovelist/ElementTypeTreeModel 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "elementTypes"
            type: "QList<ElementType*>"
            read: "elementTypes"
            write: "setElementTypes"
            notify: "elementTypesChanged"
            index: 0
            isFinal: true
        }
        Signal { name: "elementTypesChanged" }
    }
    Component {
        file: "field.h"
        name: "Field"
        accessSemantics: "reference"
        prototype: "Node"
        exports: ["libnovelist/Field 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "elements"
            type: "QList<Element*>"
            read: "elements"
            write: "setElements"
            notify: "elementsChanged"
            index: 0
            isFinal: true
        }
        Property {
            name: "values"
            type: "QList<Value*>"
            read: "values"
            write: "setValues"
            notify: "valuesChanged"
            index: 1
            isFinal: true
        }
        Property {
            name: "allowedTypes"
            type: "int"
            isList: true
            read: "allowedTypes"
            write: "setAllowedTypes"
            notify: "allowedTypesChanged"
            index: 2
            isFinal: true
        }
        Property {
            name: "allowedTypeNames"
            type: "QStringList"
            read: "allowedTypeNames"
            write: "setAllowedTypeNames"
            notify: "allowedTypesChanged"
            index: 3
            isFinal: true
        }
        Property {
            name: "minOccurs"
            type: "int"
            read: "minOccurs"
            write: "setMinOccurs"
            notify: "minOccursChanged"
            index: 4
            isFinal: true
        }
        Property {
            name: "maxOccurs"
            type: "int"
            read: "maxOccurs"
            write: "setMaxOccurs"
            notify: "maxOccursChanged"
            index: 5
            isFinal: true
        }
        Property {
            name: "valueListModel"
            type: "ValueListModel"
            isPointer: true
            read: "valueListModel"
            index: 6
            isReadonly: true
            isFinal: true
            isPropertyConstant: true
        }
        Signal { name: "elementsChanged" }
        Signal { name: "valuesChanged" }
        Signal {
            name: "valuesAdded"
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "valuesRemoved"
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal { name: "allowedTypesChanged" }
        Signal { name: "minOccursChanged" }
        Signal { name: "maxOccursChanged" }
        Method {
            name: "indexIn"
            type: "int"
            isMethodConstant: true
            Parameter { name: "element"; type: "Element"; isPointer: true }
        }
    }
    Component {
        file: "fieldlistmodel.h"
        name: "FieldListModel"
        accessSemantics: "reference"
        prototype: "QAbstractListModel"
        exports: ["libnovelist/FieldListModel 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "Role"
            values: [
                "FieldRole",
                "NameRole",
                "LabelRole",
                "InfoRole",
                "IconRole",
                "MinOccursRole",
                "MaxOccursRole",
                "AllowesTypesRole",
                "ValuesRole",
                "UserRole"
            ]
        }
        Property {
            name: "fields"
            type: "QList<Field*>"
            read: "fields"
            write: "setFields"
            notify: "fieldsChanged"
            index: 0
            isFinal: true
        }
        Property {
            name: "element"
            type: "Element"
            isPointer: true
            read: "element"
            write: "setElement"
            notify: "elementChanged"
            index: 1
            isFinal: true
        }
        Signal { name: "fieldsChanged" }
        Signal { name: "elementChanged" }
        Method {
            name: "rowCount"
            type: "int"
            isMethodConstant: true
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "rowCount"; type: "int"; isCloned: true; isMethodConstant: true }
        Method {
            name: "data"
            type: "QVariant"
            isMethodConstant: true
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "data"
            type: "QVariant"
            isCloned: true
            isMethodConstant: true
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "field"
            type: "Field"
            isPointer: true
            isMethodConstant: true
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        file: "fieldstorage.h"
        name: "FieldStorage"
        accessSemantics: "reference"
        prototype: "BaseStorage"
        exports: ["libnovelist/FieldStorage 1.0"]
        exportMetaObjectRevisions: [256]
        Method { name: "field"; type: "Field"; isPointer: true }
        Method {
            name: "field"
            type: "Field"
            isPointer: true
            Parameter { name: "rowid"; type: "int" }
        }
        Method {
            name: "createField"
            type: "Field"
            isPointer: true
            Parameter { name: "nodeType"; type: "FieldType"; isPointer: true }
            Parameter { name: "label"; type: "QString" }
            Parameter { name: "info"; type: "QString" }
            Parameter { name: "icon"; type: "QString" }
        }
        Method {
            name: "createField"
            type: "Field"
            isPointer: true
            isCloned: true
            Parameter { name: "nodeType"; type: "FieldType"; isPointer: true }
            Parameter { name: "label"; type: "QString" }
            Parameter { name: "info"; type: "QString" }
        }
        Method {
            name: "createField"
            type: "Field"
            isPointer: true
            isCloned: true
            Parameter { name: "nodeType"; type: "FieldType"; isPointer: true }
            Parameter { name: "label"; type: "QString" }
        }
        Method {
            name: "createField"
            type: "Field"
            isPointer: true
            isCloned: true
            Parameter { name: "nodeType"; type: "FieldType"; isPointer: true }
        }
        Method { name: "createField"; type: "Field"; isPointer: true; isCloned: true }
    }
    Component {
        file: "fieldtype.h"
        name: "FieldType"
        accessSemantics: "reference"
        prototype: "NodeType"
        exports: ["libnovelist/FieldType 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "elementTypes"
            type: "QList<ElementType*>"
            read: "elementTypes"
            write: "setElementTypes"
            notify: "elementTypesChanged"
            index: 0
        }
        Property {
            name: "valueTypes"
            type: "QList<ValueType*>"
            read: "valueTypes"
            write: "setValueTypes"
            notify: "valueTypesChanged"
            index: 1
        }
        Property {
            name: "allowedTypes"
            type: "int"
            isList: true
            read: "allowedTypes"
            write: "setAllowedTypes"
            notify: "allowedTypesChanged"
            index: 2
        }
        Property {
            name: "allowedTypeNames"
            type: "QStringList"
            read: "allowedTypeNames"
            write: "setAllowedTypeNames"
            notify: "allowedTypesChanged"
            index: 3
        }
        Property {
            name: "minOccurs"
            type: "int"
            read: "minOccurs"
            write: "setMinOccurs"
            notify: "minOccursChanged"
            index: 4
        }
        Property {
            name: "maxOccurs"
            type: "int"
            read: "maxOccurs"
            write: "setMaxOccurs"
            notify: "maxOccursChanged"
            index: 5
        }
        Property {
            name: "valueTypeListModel"
            type: "ValueTypeListModel"
            isPointer: true
            read: "valueTypeListModel"
            index: 6
            isReadonly: true
            isFinal: true
            isPropertyConstant: true
        }
        Signal { name: "elementTypesChanged" }
        Signal { name: "valueTypesChanged" }
        Signal {
            name: "valueTypesAdded"
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "valueTypesRemoved"
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal { name: "allowedTypesChanged" }
        Signal { name: "minOccursChanged" }
        Signal { name: "maxOccursChanged" }
    }
    Component {
        file: "fieldtypelistmodel.h"
        name: "FieldTypeListModel"
        accessSemantics: "reference"
        prototype: "QAbstractListModel"
        exports: ["libnovelist/FieldTypeListModel 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "Role"
            values: [
                "FieldTypeRole",
                "NameRole",
                "LabelRole",
                "InfoRole",
                "IconRole",
                "MinOccursRole",
                "MaxOccursRole",
                "AllowesTypesRole",
                "ValueTypesRole",
                "UserRole"
            ]
        }
        Property {
            name: "fieldTypes"
            type: "QList<FieldType*>"
            read: "fieldTypes"
            write: "setFieldTypes"
            notify: "fieldTypesChanged"
            index: 0
            isFinal: true
        }
        Property {
            name: "elementType"
            type: "ElementType"
            isPointer: true
            read: "elementType"
            write: "setElementType"
            notify: "elementTypeChanged"
            index: 1
            isFinal: true
        }
        Signal { name: "fieldTypesChanged" }
        Signal { name: "elementTypeChanged" }
        Method {
            name: "rowCount"
            type: "int"
            isMethodConstant: true
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "rowCount"; type: "int"; isCloned: true; isMethodConstant: true }
        Method {
            name: "data"
            type: "QVariant"
            isMethodConstant: true
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "data"
            type: "QVariant"
            isCloned: true
            isMethodConstant: true
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "fieldType"
            type: "FieldType"
            isPointer: true
            isMethodConstant: true
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        file: "fieldtypestorage.h"
        name: "FieldTypeStorage"
        accessSemantics: "reference"
        prototype: "BaseTypeStorage"
        exports: ["libnovelist/FieldTypeStorage 1.0"]
        exportMetaObjectRevisions: [256]
        Method { name: "fieldType"; type: "FieldType"; isPointer: true }
        Method {
            name: "fieldType"
            type: "FieldType"
            isPointer: true
            Parameter { name: "rowid"; type: "int" }
        }
        Method {
            name: "fieldType"
            type: "FieldType"
            isPointer: true
            Parameter { name: "name"; type: "QString" }
        }
        Method {
            name: "createFieldType"
            type: "FieldType"
            isPointer: true
            Parameter { name: "name"; type: "QString" }
            Parameter { name: "label"; type: "QString" }
            Parameter { name: "info"; type: "QString" }
            Parameter { name: "icon"; type: "QString" }
        }
        Method {
            name: "createFieldType"
            type: "FieldType"
            isPointer: true
            isCloned: true
            Parameter { name: "name"; type: "QString" }
            Parameter { name: "label"; type: "QString" }
            Parameter { name: "info"; type: "QString" }
        }
        Method {
            name: "createFieldType"
            type: "FieldType"
            isPointer: true
            isCloned: true
            Parameter { name: "name"; type: "QString" }
            Parameter { name: "label"; type: "QString" }
        }
        Method {
            name: "createFieldType"
            type: "FieldType"
            isPointer: true
            isCloned: true
            Parameter { name: "name"; type: "QString" }
        }
    }
    Component {
        file: "node.h"
        name: "Node"
        accessSemantics: "reference"
        prototype: "Storable"
        exports: ["libnovelist/Node 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "name"
            type: "QString"
            read: "name"
            write: "setName"
            notify: "nameChanged"
            index: 0
            isFinal: true
        }
        Property {
            name: "label"
            type: "QString"
            read: "label"
            write: "setLabel"
            notify: "labelChanged"
            index: 1
            isFinal: true
        }
        Property {
            name: "info"
            type: "QString"
            read: "info"
            write: "setInfo"
            notify: "infoChanged"
            index: 2
            isFinal: true
        }
        Property {
            name: "icon"
            type: "QString"
            read: "icon"
            write: "setIcon"
            notify: "iconChanged"
            index: 3
            isFinal: true
        }
        Property {
            name: "nodeType"
            type: "NodeType"
            isPointer: true
            read: "nodeType"
            notify: "nodeTypeChanged"
            index: 4
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "nodeListModel"
            type: "NodeListModel"
            isPointer: true
            read: "nodeListModel"
            index: 5
            isReadonly: true
            isFinal: true
            isPropertyConstant: true
        }
        Signal {
            name: "nameChanged"
            Parameter { name: "newName"; type: "QString" }
            Parameter { name: "oldName"; type: "QString" }
        }
        Signal {
            name: "labelChanged"
            Parameter { name: "newLabel"; type: "QString" }
            Parameter { name: "oldLabel"; type: "QString" }
        }
        Signal {
            name: "infoChanged"
            Parameter { name: "newInfo"; type: "QString" }
            Parameter { name: "oldInfo"; type: "QString" }
        }
        Signal {
            name: "iconChanged"
            Parameter { name: "newIcon"; type: "QString" }
            Parameter { name: "oldIcon"; type: "QString" }
        }
        Signal {
            name: "nodeTypeChanged"
            Parameter { name: "newNodeType"; type: "NodeType"; isPointer: true }
            Parameter { name: "oldNodeType"; type: "NodeType"; isPointer: true }
        }
        Signal {
            name: "childNodeAdded"
            Parameter { name: "newChild"; type: "Node"; isPointer: true }
        }
        Signal {
            name: "childNodeRemoved"
            Parameter { name: "oldChild"; type: "Node"; isPointer: true }
        }
    }
    Component {
        file: "nodelistmodel.h"
        name: "NodeListModel"
        accessSemantics: "reference"
        prototype: "QAbstractListModel"
        exports: ["libnovelist/NodeListModel 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "Role"
            values: [
                "NodeRole",
                "NameRole",
                "LabelRole",
                "InfoRole",
                "IconRole",
                "UserRole"
            ]
        }
        Property {
            name: "nodes"
            type: "QList<Node*>"
            read: "nodes"
            write: "setNodes"
            notify: "nodesChanged"
            index: 0
            isFinal: true
        }
        Property {
            name: "node"
            type: "Node"
            isPointer: true
            read: "node"
            write: "setNode"
            notify: "nodeChanged"
            index: 1
            isFinal: true
        }
        Signal { name: "nodesChanged" }
        Signal { name: "nodeChanged" }
    }
    Component {
        file: "nodestorage.h"
        name: "NodeStorage"
        accessSemantics: "reference"
        prototype: "BaseStorage"
        exports: ["libnovelist/NodeStorage 1.0"]
        exportMetaObjectRevisions: [256]
    }
    Component {
        file: "nodetype.h"
        name: "NodeType"
        accessSemantics: "reference"
        prototype: "Node"
        exports: ["libnovelist/NodeType 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
    }
    Component {
        file: "nodetypestorage.h"
        name: "NodeTypeStorage"
        accessSemantics: "reference"
        prototype: "BaseTypeStorage"
        exports: ["libnovelist/NodeTypeStorage 1.0"]
        exportMetaObjectRevisions: [256]
    }
    Component {
        file: "novelist.h"
        name: "Novelist"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["libnovelist/Novelist 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "project"
            type: "Project"
            isPointer: true
            read: "project"
            write: "setProject"
            notify: "projectChanged"
            index: 0
            isFinal: true
        }
        Signal { name: "projectChanged" }
        Signal { name: "storageChanged" }
    }
    Component {
        file: "project.h"
        name: "Project"
        accessSemantics: "reference"
        prototype: "Element"
        exports: ["libnovelist/Project 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "databaseName"
            type: "QString"
            read: "databaseName"
            write: "setDatabaseName"
            notify: "databaseNameChanged"
            index: 0
            isFinal: true
        }
        Signal { name: "storageChanged" }
        Signal { name: "databaseNameChanged" }
    }
    Component {
        file: "projectstorage.h"
        name: "ProjectStorage"
        accessSemantics: "reference"
        prototype: "BaseStorage"
        exports: ["libnovelist/ProjectStorage 1.0"]
        exportMetaObjectRevisions: [256]
        Method { name: "project"; type: "Project"; isPointer: true }
        Method {
            name: "project"
            type: "Project"
            isPointer: true
            Parameter { name: "rowid"; type: "int" }
        }
        Method {
            name: "createProject"
            type: "Project"
            isPointer: true
            Parameter { name: "type"; type: "QString" }
        }
        Method {
            name: "createProject"
            type: "Project"
            isPointer: true
            Parameter { name: "nodeType"; type: "ProjectType"; isPointer: true }
        }
        Method { name: "createProject"; type: "Project"; isPointer: true; isCloned: true }
    }
    Component {
        file: "projecttype.h"
        name: "ProjectType"
        accessSemantics: "reference"
        prototype: "ElementType"
        exports: ["libnovelist/ProjectType 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
    }
    Component {
        file: "projecttypestorage.h"
        name: "ProjectTypeStorage"
        accessSemantics: "reference"
        prototype: "BaseTypeStorage"
        exports: ["libnovelist/ProjectTypeStorage 1.0"]
        exportMetaObjectRevisions: [256]
        Method { name: "projectType"; type: "ProjectType"; isPointer: true }
        Method {
            name: "projectType"
            type: "ProjectType"
            isPointer: true
            Parameter { name: "rowid"; type: "int" }
        }
        Method {
            name: "projectType"
            type: "ProjectType"
            isPointer: true
            Parameter { name: "name"; type: "QString" }
        }
        Method {
            name: "createProjectType"
            type: "ProjectType"
            isPointer: true
            Parameter { name: "name"; type: "QString" }
            Parameter { name: "label"; type: "QString" }
            Parameter { name: "info"; type: "QString" }
            Parameter { name: "icon"; type: "QString" }
        }
        Method {
            name: "createProjectType"
            type: "ProjectType"
            isPointer: true
            isCloned: true
            Parameter { name: "name"; type: "QString" }
            Parameter { name: "label"; type: "QString" }
            Parameter { name: "info"; type: "QString" }
        }
        Method {
            name: "createProjectType"
            type: "ProjectType"
            isPointer: true
            isCloned: true
            Parameter { name: "name"; type: "QString" }
            Parameter { name: "label"; type: "QString" }
        }
        Method {
            name: "createProjectType"
            type: "ProjectType"
            isPointer: true
            isCloned: true
            Parameter { name: "name"; type: "QString" }
        }
    }
    Component {
        file: "qstandarditemmodel.h"
        name: "QStandardItemModel"
        accessSemantics: "reference"
        prototype: "QAbstractItemModel"
        Property {
            name: "sortRole"
            type: "int"
            bindable: "bindableSortRole"
            read: "sortRole"
            write: "setSortRole"
            index: 0
        }
        Signal {
            name: "itemChanged"
            Parameter { name: "item"; type: "QStandardItem"; isPointer: true }
        }
        Method {
            name: "_q_emitItemChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
        }
    }
    Component {
        file: "storable.h"
        name: "Storable"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["libnovelist/Storable 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Enum {
            name: "Type"
            values: [
                "Type_Unknown",
                "Type_Storable",
                "Type_Node",
                "Type_Field",
                "Type_Element",
                "Type_Value",
                "Type_Project",
                "Type_NodeType",
                "Type_FieldType",
                "Type_ElementType",
                "Type_ValueType",
                "Type_ProjectType"
            ]
        }
        Enum {
            name: "Flag"
            values: ["NoFlag", "Flag_Modified", "Flag_Saving", "Flag_Loading"]
        }
        Property {
            name: "rowid"
            type: "int"
            read: "rowid"
            notify: "rowidChanged"
            index: 0
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "type"
            type: "int"
            read: "type"
            notify: "typeChanged"
            index: 1
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "modified"
            type: "bool"
            read: "isModified"
            write: "setModified"
            notify: "modifiedChanged"
            index: 2
            isFinal: true
        }
        Property {
            name: "createdBy"
            type: "QString"
            read: "createdBy"
            write: "setCreatedBy"
            notify: "createdByChanged"
            index: 3
            isFinal: true
        }
        Property {
            name: "updatedBy"
            type: "QString"
            read: "updatedBy"
            write: "setUpdatedBy"
            notify: "updatedByChanged"
            index: 4
            isFinal: true
        }
        Property {
            name: "createdAt"
            type: "QDateTime"
            read: "createdAt"
            write: "setCreatedAt"
            notify: "createdAtChanged"
            index: 5
            isFinal: true
        }
        Property {
            name: "updatedAt"
            type: "QDateTime"
            read: "updatedAt"
            write: "setUpdatedAt"
            notify: "updatedAtChanged"
            index: 6
            isFinal: true
        }
        Property {
            name: "version"
            type: "int"
            read: "version"
            write: "setVersion"
            notify: "versionChanged"
            index: 7
            isFinal: true
        }
        Signal { name: "rowidChanged" }
        Signal { name: "typeChanged" }
        Signal { name: "storageChanged" }
        Signal { name: "modifiedChanged" }
        Signal { name: "createdByChanged" }
        Signal { name: "updatedByChanged" }
        Signal { name: "createdAtChanged" }
        Signal { name: "updatedAtChanged" }
        Signal { name: "reloaded" }
        Signal { name: "saved" }
        Signal { name: "recycled" }
        Signal { name: "versionChanged" }
    }
    Component {
        file: "storage.h"
        name: "Storage"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: ["libnovelist/Storage 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "elementStorage"
            type: "ElementStorage"
            isPointer: true
            read: "elementStorage"
            index: 0
            isReadonly: true
            isFinal: true
            isPropertyConstant: true
        }
        Property {
            name: "elementTypeStorage"
            type: "ElementTypeStorage"
            isPointer: true
            read: "elementTypeStorage"
            index: 1
            isReadonly: true
            isFinal: true
            isPropertyConstant: true
        }
        Property {
            name: "fieldStorage"
            type: "FieldStorage"
            isPointer: true
            read: "fieldStorage"
            index: 2
            isReadonly: true
            isFinal: true
            isPropertyConstant: true
        }
        Property {
            name: "fieldTypeStorage"
            type: "FieldTypeStorage"
            isPointer: true
            read: "fieldTypeStorage"
            index: 3
            isReadonly: true
            isFinal: true
            isPropertyConstant: true
        }
        Property {
            name: "valueStorage"
            type: "ValueStorage"
            isPointer: true
            read: "valueStorage"
            index: 4
            isReadonly: true
            isFinal: true
            isPropertyConstant: true
        }
        Property {
            name: "valueTypeStorage"
            type: "ValueTypeStorage"
            isPointer: true
            read: "valueTypeStorage"
            index: 5
            isReadonly: true
            isFinal: true
            isPropertyConstant: true
        }
        Property {
            name: "projectStorage"
            type: "ProjectStorage"
            isPointer: true
            read: "projectStorage"
            index: 6
            isReadonly: true
            isFinal: true
            isPropertyConstant: true
        }
        Property {
            name: "projectTypeStorage"
            type: "ProjectTypeStorage"
            isPointer: true
            read: "projectTypeStorage"
            index: 7
            isReadonly: true
            isFinal: true
            isPropertyConstant: true
        }
        Property {
            name: "databaseName"
            type: "QString"
            read: "databaseName"
            write: "setDatabaseName"
            notify: "databaseNameChanged"
            index: 8
            isFinal: true
        }
        Property {
            name: "databaseConnectionName"
            type: "QString"
            read: "databaseConnectionName"
            write: "setDatabaseConnectionName"
            notify: "databaseConnectionNameChanged"
            index: 9
            isFinal: true
        }
        Signal { name: "databaseChanged" }
        Signal { name: "databaseNameChanged" }
        Signal { name: "databaseConnectionNameChanged" }
    }
    Component {
        file: "value.h"
        name: "Value"
        accessSemantics: "reference"
        prototype: "Node"
        exports: ["libnovelist/Value 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Enum {
            name: "Type"
            values: [
                "Type_Unknown",
                "Type_String",
                "Type_Int",
                "Type_Float",
                "Type_Double",
                "Type_Bool",
                "Type_Date",
                "Type_Time",
                "Type_DateTime",
                "Type_Node",
                "Type_NodeList"
            ]
        }
        Property {
            name: "fields"
            type: "QList<Field*>"
            read: "fields"
            write: "setFields"
            notify: "fieldsChanged"
            index: 0
            isFinal: true
        }
        Property {
            name: "value"
            type: "QVariant"
            read: "value"
            write: "setValue"
            notify: "valueChanged"
            index: 1
            isFinal: true
        }
        Property {
            name: "valueType"
            type: "int"
            read: "valueType"
            write: "setValueType"
            notify: "valueTypeChanged"
            index: 2
            isFinal: true
        }
        Signal { name: "fieldsChanged" }
        Signal { name: "valueChanged" }
        Signal { name: "valueTypeChanged" }
        Method {
            name: "indexIn"
            type: "int"
            isMethodConstant: true
            Parameter { name: "field"; type: "Field"; isPointer: true }
        }
    }
    Component {
        file: "valuelistmodel.h"
        name: "ValueListModel"
        accessSemantics: "reference"
        prototype: "QAbstractListModel"
        exports: ["libnovelist/ValueListModel 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "Role"
            values: [
                "ValueRole",
                "NameRole",
                "LabelRole",
                "InfoRole",
                "IconRole",
                "ValueTypeRole",
                "ValueValueRole",
                "UserRole"
            ]
        }
        Property {
            name: "values"
            type: "QList<Value*>"
            read: "values"
            write: "setValues"
            notify: "valuesChanged"
            index: 0
            isFinal: true
        }
        Property {
            name: "field"
            type: "Field"
            isPointer: true
            read: "field"
            write: "setField"
            notify: "fieldChanged"
            index: 1
            isFinal: true
        }
        Signal { name: "valuesChanged" }
        Signal { name: "fieldChanged" }
        Method {
            name: "rowCount"
            type: "int"
            isMethodConstant: true
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "rowCount"; type: "int"; isCloned: true; isMethodConstant: true }
        Method {
            name: "data"
            type: "QVariant"
            isMethodConstant: true
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "data"
            type: "QVariant"
            isCloned: true
            isMethodConstant: true
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "value"
            type: "Value"
            isPointer: true
            isMethodConstant: true
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        file: "valuestorage.h"
        name: "ValueStorage"
        accessSemantics: "reference"
        prototype: "BaseStorage"
        exports: ["libnovelist/ValueStorage 1.0"]
        exportMetaObjectRevisions: [256]
        Method { name: "value"; type: "Value"; isPointer: true }
        Method {
            name: "value"
            type: "Value"
            isPointer: true
            Parameter { name: "rowid"; type: "int" }
        }
        Method {
            name: "createValue"
            type: "Value"
            isPointer: true
            Parameter { name: "nodeType"; type: "ValueType"; isPointer: true }
            Parameter { name: "label"; type: "QString" }
            Parameter { name: "info"; type: "QString" }
            Parameter { name: "icon"; type: "QString" }
        }
        Method {
            name: "createValue"
            type: "Value"
            isPointer: true
            isCloned: true
            Parameter { name: "nodeType"; type: "ValueType"; isPointer: true }
            Parameter { name: "label"; type: "QString" }
            Parameter { name: "info"; type: "QString" }
        }
        Method {
            name: "createValue"
            type: "Value"
            isPointer: true
            isCloned: true
            Parameter { name: "nodeType"; type: "ValueType"; isPointer: true }
            Parameter { name: "label"; type: "QString" }
        }
        Method {
            name: "createValue"
            type: "Value"
            isPointer: true
            isCloned: true
            Parameter { name: "nodeType"; type: "ValueType"; isPointer: true }
        }
        Method { name: "createValue"; type: "Value"; isPointer: true; isCloned: true }
    }
    Component {
        file: "valuetype.h"
        name: "ValueType"
        accessSemantics: "reference"
        prototype: "NodeType"
        exports: ["libnovelist/ValueType 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Property {
            name: "fieldTypes"
            type: "QList<FieldType*>"
            read: "fieldTypes"
            write: "setFieldTypes"
            notify: "fieldTypesChanged"
            index: 0
            isFinal: true
        }
        Signal { name: "fieldTypesChanged" }
    }
    Component {
        file: "valuetypelistmodel.h"
        name: "ValueTypeListModel"
        accessSemantics: "reference"
        prototype: "QAbstractListModel"
        exports: ["libnovelist/ValueTypeListModel 1.0"]
        exportMetaObjectRevisions: [256]
        Enum {
            name: "Role"
            values: [
                "ValueTypeRole",
                "NameRole",
                "LabelRole",
                "InfoRole",
                "IconRole",
                "UserRole"
            ]
        }
        Property {
            name: "valueTypes"
            type: "QList<ValueType*>"
            read: "valueTypes"
            write: "setValueTypes"
            notify: "valueTypesChanged"
            index: 0
            isFinal: true
        }
        Property {
            name: "fieldType"
            type: "FieldType"
            isPointer: true
            read: "fieldType"
            write: "setFieldType"
            notify: "fieldTypeChanged"
            index: 1
            isFinal: true
        }
        Signal { name: "valueTypesChanged" }
        Signal { name: "fieldTypeChanged" }
        Method {
            name: "rowCount"
            type: "int"
            isMethodConstant: true
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "rowCount"; type: "int"; isCloned: true; isMethodConstant: true }
        Method {
            name: "data"
            type: "QVariant"
            isMethodConstant: true
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "data"
            type: "QVariant"
            isCloned: true
            isMethodConstant: true
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "valueType"
            type: "ValueType"
            isPointer: true
            isMethodConstant: true
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        file: "valuetypestorage.h"
        name: "ValueTypeStorage"
        accessSemantics: "reference"
        prototype: "BaseTypeStorage"
        exports: ["libnovelist/ValueTypeStorage 1.0"]
        exportMetaObjectRevisions: [256]
        Method { name: "valueType"; type: "ValueType"; isPointer: true }
        Method {
            name: "valueType"
            type: "ValueType"
            isPointer: true
            Parameter { name: "rowid"; type: "int" }
        }
        Method {
            name: "valueType"
            type: "ValueType"
            isPointer: true
            Parameter { name: "name"; type: "QString" }
        }
        Method {
            name: "createValueType"
            type: "ValueType"
            isPointer: true
            Parameter { name: "name"; type: "QString" }
            Parameter { name: "label"; type: "QString" }
            Parameter { name: "info"; type: "QString" }
            Parameter { name: "icon"; type: "QString" }
        }
        Method {
            name: "createValueType"
            type: "ValueType"
            isPointer: true
            isCloned: true
            Parameter { name: "name"; type: "QString" }
            Parameter { name: "label"; type: "QString" }
            Parameter { name: "info"; type: "QString" }
        }
        Method {
            name: "createValueType"
            type: "ValueType"
            isPointer: true
            isCloned: true
            Parameter { name: "name"; type: "QString" }
            Parameter { name: "label"; type: "QString" }
        }
        Method {
            name: "createValueType"
            type: "ValueType"
            isPointer: true
            isCloned: true
            Parameter { name: "name"; type: "QString" }
        }
    }
}
